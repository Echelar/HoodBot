namespace RobinHood70.Robby
{
	using System;
	using RobinHood70.Robby.Design;
	using RobinHood70.WallE.Base;
	using RobinHood70.WikiCommon;
	using static WikiCommon.Globals;

	/// <summary>Represents a full title, which can include interwiki and fragment information.</summary>
	/// <seealso cref="RobinHood70.Robby.Title" />
	public class FullTitle : IWikiTitle, IEquatable<FullTitle>, IEquatable<Title>
	{
		#region Constructors

		/// <summary>
		/// Initializes a new instance of the <see cref="FullTitle"/> class.
		/// </summary>
		/// <param name="site">The site this title is from.</param>
		/// <param name="fullPageName">The full name of the page.</param>
		/// <autogeneratedoc />
		public FullTitle(Site site, string fullPageName)
		{
			ThrowNull(site, nameof(site));
			ThrowNull(fullPageName, nameof(fullPageName));
			var titleParts = new TitleParts(site, fullPageName);
		}

		/// <summary>Initializes a new instance of the <see cref="FullTitle"/> class.</summary>
		/// <param name="site">The site this title is from.</param>
		/// <param name="baseItem">The <see cref="InterwikiTitleItem"/> to initialize from.</param>
		internal FullTitle(Site site, InterwikiTitleItem baseItem)
			: this(site, baseItem?.Title)
		{
			ThrowNull(baseItem, nameof(baseItem));
			this.Interwiki = baseItem.InterwikiPrefix == null ? null : site.InterwikiMap[baseItem.InterwikiPrefix];
			this.Uri = baseItem.Url;
		}

		/// <summary>Initializes a new instance of the <see cref="FullTitle"/> class.</summary>
		/// <param name="site">The site this title is from.</param>
		/// <param name="baseItem">The <see cref="PageSetRedirectItem"/> to initialize from.</param>
		internal FullTitle(Site site, PageSetRedirectItem baseItem)
			: this(site, baseItem?.Title)
		{
			ThrowNull(baseItem, nameof(baseItem));
			this.Fragment = baseItem.Fragment;
			this.Interwiki = baseItem.Interwiki == null ? null : site.InterwikiMap[baseItem.Interwiki];
			this.Uri = site.GetArticlePath(this.Interwiki?.Path, this.FullPageName, this.Fragment);
		}
		#endregion

		#region Public Properties

		/// <summary>Gets or sets the title's fragment (the section or ID to scroll to).</summary>
		/// <value>The fragment.</value>
		public string Fragment { get; set; }

		public string FullPageName { get; set; }

		/// <summary>Gets or sets the interwiki prefix.</summary>
		/// <value>The interwiki prefix.</value>
		public InterwikiEntry Interwiki { get; set; }

		public bool IsLocal => this.Interwiki == null || this.Interwiki.LocalWiki;

		public string Key { get; }

		public Namespace Namespace { get; set; }

		public string PageName { get; set; }

		public Site Site { get; }

		/// <summary>Gets or sets the URI of the link.</summary>
		/// <value>The URI of the link.</value>
		public Uri Uri { get; set; }
		#endregion

		#region Operators

		/// <summary>Performs an explicit conversion from <see cref="FullTitle"/> to <see cref="Title"/>.</summary>
		/// <param name="fullTitle">The full title.</param>
		/// <returns>The result of the conversion.</returns>
		/// <exception cref="InvalidCastException">Thrown if the FullTitle contains a non-local interwiki component and cannot be converted.</exception>
		public static explicit operator Title(FullTitle fullTitle) => fullTitle?.ToTitle();
		#endregion

		#region Public Methods

		public bool Equals(FullTitle other)
		{
			if (other == null)
			{
				return false;
			}

			return InterwikiEntry.LocalOrEqual(this.Interwiki, other.Interwiki) && this.Namespace == other.Namespace && this.PageName == other.PageName && this.Fragment == other.Fragment;
		}

		public bool Equals(Title other)
		{
			if (other == null || this.Interwiki != null || !this.Interwiki.LocalWiki)
			{
				return false;
			}

			return this.Namespace == other.Namespace && this.PageName == other.PageName;
		}

		public Title ToTitle()
		{
			if (this.Interwiki != null && !this.Interwiki.LocalWiki)
			{
				throw new InvalidCastException();
			}

			return new Title(this.Site, this.Namespace.Id, this.PageName);
		}
		#endregion
	}
}
