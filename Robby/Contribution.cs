namespace RobinHood70.Robby
{
	using System;
	using System.Collections.Generic;
	using RobinHood70.WallE.Base;
	using static WikiCommon.Globals;

	/// <summary>Stores information about a single user contribution.</summary>
	/// <seealso cref="RobinHood70.Robby.Revision" />
	public class Contribution : Revision
	{
		/// <summary>Initializes a new instance of the <see cref="Contribution" /> class.</summary>
		/// <param name="site">The site the contribution is from.</param>
		/// <param name="contribution">The contribution.</param>
		/// <autogeneratedoc />
		protected internal Contribution(Site site, UserContributionsItem contribution)
			: base()
		{
			ThrowNull(contribution, nameof(contribution));
			this.Title = new Title(site, contribution.Title);

			this.Anonymous = contribution.UserId == 0;
			this.Comment = contribution.Comment;
			this.Id = contribution.RevisionId;
			this.Minor = contribution.Flags.HasFlag(UserContributionFlags.Minor);
			this.ParentId = 0;
			this.Text = null;
			this.Timestamp = contribution.Timestamp ?? DateTime.MinValue;
			this.User = contribution.User;

			this.New = contribution.Flags.HasFlag(UserContributionFlags.New);
			this.Patrolled = contribution.Flags.HasFlag(UserContributionFlags.Patrolled);
			this.NewSize = contribution.Size;
			this.OldSize = contribution.Size - contribution.SizeDifference;
			this.Tags = contribution.Tags;
		}

		/// <summary>Gets the namespace.</summary>
		/// <value>The namespace.</value>
		/// <autogeneratedoc />
		public Namespace Namespace { get; }

		/// <summary>Gets a value indicating whether this <see cref="Contribution" /> is new.</summary>
		/// <value><c>true</c> if new; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		public bool New { get; }

		/// <summary>Gets a value indicating whether this <see cref="Contribution" /> is patrolled.</summary>
		/// <value><c>true</c> if patrolled; otherwise, <c>false</c>.</value>
		/// <autogeneratedoc />
		public bool Patrolled { get; }

		/// <summary>Gets the new size.</summary>
		/// <value>The new size.</value>
		/// <autogeneratedoc />
		public int NewSize { get; }

		/// <summary>Gets the old size.</summary>
		/// <value>The old size.</value>
		/// <autogeneratedoc />
		public int OldSize { get; }

		/// <summary>Gets the tags.</summary>
		/// <value>The tags.</value>
		/// <autogeneratedoc />
		public IReadOnlyList<string> Tags { get; }

		/// <summary>Gets the title.</summary>
		/// <value>The title.</value>
		/// <autogeneratedoc />
		public Title Title { get; }
	}
}
