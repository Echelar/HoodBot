namespace RobinHood70.Robby
{
	using System;
	using System.Collections.Generic;

	/// <summary>Represents a warning generated by Robby or, by extension, the wiki itself.</summary>
	/// <seealso cref="System.EventArgs" />
	public class EditIgnoredEventArgs : EventArgs
	{
		#region Constructors

		/// <summary>Initializes a new instance of the <see cref="EditIgnoredEventArgs"/> class.</summary>
		/// <param name="sender">The real sending object.</param>
		/// <param name="methodName">The method name.</param>
		/// <param name="parameters">Any parameters to the method. If null, Parameters will be set to an empty dictionary.</param>
		public EditIgnoredEventArgs(object sender, string methodName, IReadOnlyDictionary<string, object> parameters)
		{
			this.Sender = sender;
			this.MethodName = methodName;
			this.Parameters = parameters ?? new Dictionary<string, object>();
		}
		#endregion

		#region Public Properties

		/// <summary>Gets the sender of the warning.</summary>
		/// <value>The sender of the warning.</value>
		public string MethodName { get; }

		/// <summary>Gets the actual sending object.</summary>
		/// <value>The sender.</value>
		public object Sender { get; }

		/// <summary>Gets the parameters of the method that published the event.</summary>
		/// <value>The parameters.</value>
		public IReadOnlyDictionary<string, object> Parameters { get; }
		#endregion
	}
}
