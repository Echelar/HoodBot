namespace RobinHood70.Robby
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using Design;
	using WikiCommon;
	using static Properties.Resources;
	using static WikiCommon.Globals;

	/// <summary>Provides a base class to manipulate a collection of titles.</summary>
	/// <typeparam name="TTitle">The type of the title.</typeparam>
	/// <seealso cref="System.Collections.Generic.IList{TTitle}" />
	/// <seealso cref="System.Collections.Generic.IReadOnlyCollection{TTitle}" />
	/// <remarks>This collection class functions similarly to a KeyedCollection, but automatically overwrites existing items with new ones. Because IWikiTitle objects don't support changing item keys, neither does this.</remarks>
	public abstract class TitleCollection<TTitle> : IList<TTitle>, IReadOnlyCollection<TTitle>
		where TTitle : IWikiTitle
	{
		#region Fields
		private readonly Dictionary<string, TTitle> dictionary = new Dictionary<string, TTitle>();
		private readonly List<TTitle> items = new List<TTitle>();
		#endregion

		#region Constructors

		/// <summary>Initializes a new instance of the <see cref="TitleCollection{TTitle}"/> class.</summary>
		/// <param name="site">The site the titles belong to. All titles in a collection must belong to the same site.</param>
		protected TitleCollection([ValidatedNotNull] Site site)
		{
			ThrowNull(site, nameof(site));
			this.Site = site;
		}
		#endregion

		#region Public Properties

		/// <summary>Gets the number of elements contained in the <see cref="TitleCollection">collection</see>.</summary>
		public int Count => this.items.Count;

		/// <summary>Gets a value indicating whether the <see cref="TitleCollection">collection</see> is read-only.</summary>
		public bool IsReadOnly { get; } = false;

		/// <summary>Gets the site for the collection.</summary>
		/// <value>The site.</value>
		public Site Site { get; }
		#endregion

		#region Protected Properties

		/// <summary>Gets the collection's underlying title lookup dictionary.</summary>
		/// <value>The dictionary.</value>
		protected IReadOnlyDictionary<string, TTitle> Dictionary => this.dictionary;

		/// <summary>Gets the list of all items in the collection.</summary>
		/// <value>The items.</value>
		protected IReadOnlyList<TTitle> Items => this.items;
		#endregion

		#region Public Indexers

		/// <summary>Gets or sets the <see cref="IWikiTitle">Title</see> at the specified index.</summary>
		/// <param name="index">The index.</param>
		/// <returns>The <see cref="IWikiTitle">Title</see> at the specified index.</returns>
		public TTitle this[int index]
		{
			get => this.items[index];
			set
			{
				ThrowNull(value, nameof(value));
				this.items[index] = value;
				this.dictionary[value.Key] = value;
			}
		}

		/// <summary>Gets or sets the <see cref="IWikiTitle">Title</see> with the specified key.</summary>
		/// <param name="key">The key.</param>
		/// <returns>The <see cref="IWikiTitle">Title</see>.</returns>
		/// <autogeneratedoc />
		public virtual TTitle this[string key]
		{
			get => this.dictionary[key];
			set
			{
				var index = this.IndexOf(key);
				if (index < 0)
				{
					this.items.Add(value);
				}
				else
				{
					this.items[index] = value;
				}

				this.dictionary[key] = value;
			}
		}
		#endregion

		#region Public Methods

		/// <summary>Adds an item to the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="item">The object to add to the <see cref="TitleCollection">collection</see>.</param>
		public void Add(TTitle item)
		{
			var index = this.IndexOf(item);
			if (index != -1)
			{
				// We don't touch the dictionary here because InsertItem will simply write over top of the existing entry.
				this.items.RemoveAt(index);
			}

			this.InsertItem(this.items.Count, item);
		}

		/// <summary>Adds multiple titles to the <see cref="TitleCollection">collection</see> at once.</summary>
		/// <param name="titles">The titles to add.</param>
		/// <remarks>This method is for convenience only. Unlike the equivalent <see cref="List{T}"/> function, it simply calls <see cref="Add(TTitle)"/> repeatedly and provides no performance benefit.</remarks>
		public void AddRange(IEnumerable<TTitle> titles)
		{
			if (titles != null)
			{
				foreach (var title in titles)
				{
					this.Add(title);
				}
			}
		}

		/// <summary>Determines whether the <see cref="TitleCollection">collection</see> contains a specific value.</summary>
		/// <param name="item">The object to locate in the <see cref="TitleCollection">collection</see>.</param>
		/// <returns><see langword="true" /> if <paramref name="item" /> is found in the <see cref="TitleCollection">collection</see>; otherwise, <see langword="false" />.</returns>
		public bool Contains(TTitle item) => this.dictionary.ContainsKey(item?.Key);

		/// <summary>Determines whether the collection contains an item with the specified key.</summary>
		/// <param name="key">The key to search for.</param>
		/// <returns><see langword="true" /> if the collection contains an item with the specified key; otherwise, <see langword="true" />.</returns>
		public bool Contains(string key) => this.dictionary.ContainsKey(key);

		/// <summary>Copies the elements of the <see cref="TitleCollection">collection</see> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
		/// <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="TitleCollection">collection</see>. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
		/// <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
		public void CopyTo(TTitle[] array, int arrayIndex) => this.items.CopyTo(array, arrayIndex);

		/// <summary>Returns an enumerator that iterates through the collection.</summary>
		/// <returns>An enumerator that can be used to iterate through the collection.</returns>
		public IEnumerator<TTitle> GetEnumerator() => this.items.GetEnumerator();

		IEnumerator IEnumerable.GetEnumerator() => this.items.GetEnumerator();

		/// <summary>Determines the index of a specific item in the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="item">The item to locate in the <see cref="TitleCollection">collection</see>.</param>
		/// <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
		public int IndexOf(TTitle item) => this.IndexOf(item?.Key);

		/// <summary>Determines the index of a specific item in the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="key">The key of the item to locate in the <see cref="TitleCollection">collection</see>.</param>
		/// <returns>The index of the item with the specified <paramref name="key" /> if found in the list; otherwise, -1.</returns>
		public int IndexOf(string key)
		{
			// ContainsKey is O(1), so check to make sure item exists before iterating the collection.
			if (this.dictionary.ContainsKey(key))
			{
				for (var i = 0; i < this.items.Count; i++)
				{
					if (this[i].Key == key)
					{
						return i;
					}
				}
			}

			return -1;
		}

		/// <summary>Inserts an item into the <see cref="TitleCollection">collection</see> at the specified index.</summary>
		/// <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
		/// <param name="item">The item to insert into the <see cref="TitleCollection">collection</see>.</param>
		public void Insert(int index, TTitle item) => this.InsertItem(index, item);

		/// <summary>Removes a specific item from the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="item">The item to remove from the <see cref="TitleCollection">collection</see>.</param>
		/// <returns><see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="TitleCollection">collection</see>; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="TitleCollection">collection</see>.</returns>
		public bool Remove(TTitle item) => this.Remove(item?.Key);

		/// <summary>Removes the item with the specified key from the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="key">The key of the item to remove from the <see cref="TitleCollection">collection</see>.</param>
		/// <returns><see langword="true" /> if and item with the specified <paramref name="key" /> was successfully removed from the <see cref="TitleCollection">collection</see>; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if an item with the specified <paramref name="key" /> is not found in the original <see cref="TitleCollection">collection</see>.</returns>
		public bool Remove(string key)
		{
			ThrowNull(key, nameof(key));
			var index = this.IndexOf(key);
			if (index == -1)
			{
				return false;
			}

			this.RemoveItem(index);
			return true;
		}

		/// <summary>Removes the <see cref="TitleCollection">collection</see> item at the specified index.</summary>
		/// <param name="index">The zero-based index of the item to remove.</param>
		public void RemoveAt(int index) => this.RemoveItem(index);

		/// <summary>Sorts the items in the <see cref="TitleCollection">collection</see> by key.</summary>
		public void Sort() => this.Sort(new WikiTitleComparerKey());

		/// <summary>Sorts the items in the <see cref="TitleCollection">collection</see> using the specified <see cref="T:System.Comparison{T}"/>.</summary>
		/// <param name="comparison">The comparison.</param>
		public void Sort(Comparison<IWikiTitle> comparison) => (this.items as List<IWikiTitle>).Sort(comparison);

		/// <summary>Sorts the items in the <see cref="TitleCollection">collection</see> using the specified <see cref="T:System.IComparer{T}"/>.</summary>
		/// <param name="comparer">The comparer.</param>
		public void Sort(IComparer<IWikiTitle> comparer) => (this.items as List<IWikiTitle>).Sort(comparer);

		/// <summary>Comparable to <see cref="M:System.Collections.Generic.Dictionary{TKey, TValue}.TryGetValue(TKey, out TValue)"/>, attempts to get the value associated with the specified key..</summary>
		/// <param name="key">The key of the value to get.</param>
		/// <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
		/// <returns><see langword="true" /> if the <see cref="TitleCollection">collection</see> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
		/// <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
		public bool TryGetValue(string key, out TTitle value) => this.dictionary.TryGetValue(key, out value);
		#endregion

		#region Public Virtual Methods

		/// <summary>Removes all items from the <see cref="TitleCollection">collection</see>.</summary>
		public virtual void Clear()
		{
			this.items.Clear();
			this.dictionary.Clear();
		}
		#endregion

		#region Protected Override Methods

		/// <summary>Inserts an item into the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="index">The index to insert at.</param>
		/// <param name="item">The item.</param>
		/// <exception cref="T:System.InvalidOperationException">The <see cref="P:IWikiTitle.Site"/> property of the item does not match the <see cref="P:TitleCollection{TTitle}.Site"/> property of the collection.</exception>
		/// <remarks>This method underlies the <see cref="M:Insert(int, TTitle)"/> method and, like <see cref="M:System.Collections.ObjectModel.Collection{T}.InsertItem(int, T)"/>, can be overridden in derived classes.</remarks>
		protected virtual void InsertItem(int index, TTitle item)
		{
			ThrowNull(item, nameof(item));
			if (item.Site != this.Site)
			{
				throw new InvalidOperationException(CurrentCulture(InvalidSite));
			}

			this.dictionary[item.Key] = item;
			this.items.Insert(index, item);
		}

		/// <summary>Removes the item at a specific index in the <see cref="TitleCollection">collection</see>.</summary>
		/// <param name="index">The index of the item to remove.</param>
		/// <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is equal to or higher than the number of items in the collection.</exception>
		/// <remarks>This method underlies the <see cref="M:RobinHood70.Robby.TitleCollection{TTitle}.RemoveAt(int)"/> method and, like <see cref="M:System.Collections.ObjectModel.Collection{T}.RemoveItem(int)"/>, can be overridden in derived classes.</remarks>
		protected virtual void RemoveItem(int index)
		{
			if (index >= this.items.Count)
			{
				throw new ArgumentOutOfRangeException(nameof(index));
			}

			this.dictionary.Remove(this.items[index].Key);
			this.items.RemoveAt(index);
		}
		#endregion
	}
}